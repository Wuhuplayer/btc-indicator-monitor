#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MVRV Z-Score‰ºòÂåñÈòàÂÄºÁ≠ñÁï•
ÂéªÊéâÂ§çÊùÇÁöÑÊäÄÊúØÊåáÊ†áÔºåÂè™‰ºòÂåñMVRV Z-ScoreÁöÑ‰π∞ÂçñÈòàÂÄº

Ê†∏ÂøÉ‰ºòÂåñÔºö
1. Èôç‰ΩéÂçñÂá∫ÈòàÂÄºÔºö‰ªéZ>6Èôç‰ΩéÂà∞Z>4.5ÔºåÊèêÂâçÂú®È´ò‰ΩçÂçñÂá∫
2. ÂàÜÊâπÂçñÂá∫ÔºöÂú®Z>4.5Êó∂Â∞±ÂºÄÂßãÂàÜÊâπÂçñÂá∫
3. ‰øùÊåÅ‰π∞ÂÖ•ÈÄªËæë‰∏çÂèò
"""

import pandas as pd
import numpy as np
import yfinance as yf
from datetime import datetime

print("=" * 100)
print("üéØ MVRV Z-Score‰ºòÂåñÈòàÂÄºÁ≠ñÁï• - ÁÆÄÂåñÁâà")
print("=" * 100)
print()

# ============================================================================
# Âä†ËΩΩÊï∞ÊçÆ
# ============================================================================
print("„ÄêÊ≠•È™§1„ÄëÂä†ËΩΩÁúüÂÆûMVRV Z-ScoreÊï∞ÊçÆ...")
print()

try:
    mvrv_df = pd.read_csv('results/ÁúüÂÆûMVRV_Z_ScoreÊï∞ÊçÆ_CoinMetrics.csv')
    mvrv_df['date'] = pd.to_datetime(mvrv_df['date']).dt.tz_localize(None)
    print(f"‚úÖ ÊàêÂäüÂä†ËΩΩMVRVÊï∞ÊçÆ: {len(mvrv_df)}Êù°")
except Exception as e:
    print(f"‚ùå Âä†ËΩΩÂ§±Ë¥•: {e}")
    exit(1)

print()
print("„ÄêÊ≠•È™§2„ÄëÂä†ËΩΩBTC‰ª∑Ê†ºÊï∞ÊçÆ...")
print()

try:
    btc = yf.Ticker('BTC-USD')
    btc_hist = btc.history(start='2014-01-01', end='2025-12-31')
    btc_hist = btc_hist.reset_index()
    
    price_df = pd.DataFrame({
        'date': pd.to_datetime(btc_hist['Date']).dt.tz_localize(None),
        'close': btc_hist['Close']
    })
    
    print(f"‚úÖ ÊàêÂäüÂä†ËΩΩBTC‰ª∑Ê†ºÊï∞ÊçÆ: {len(price_df)}Êù°")
except Exception as e:
    print(f"‚ùå Âä†ËΩΩÂ§±Ë¥•: {e}")
    exit(1)

print()
print("„ÄêÊ≠•È™§3„ÄëÂêàÂπ∂Êï∞ÊçÆ...")
print()

df = pd.merge(price_df, mvrv_df[['date', 'mvrv', 'mvrv_z_score']], on='date', how='inner')
df = df.sort_values('date').reset_index(drop=True)

print(f"‚úÖ Êï∞ÊçÆÂáÜÂ§áÂÆåÊàê: {len(df)}Êù°")
print(f"   Êó∂Èó¥ËåÉÂõ¥: {df['date'].min().strftime('%Y-%m-%d')} Ëá≥ {df['date'].max().strftime('%Y-%m-%d')}")
print()

# ============================================================================
# ‰ºòÂåñÁ≠ñÁï•Á±ª
# ============================================================================
class OptimizedMVRVStrategy:
    """MVRV Z-Score‰ºòÂåñÈòàÂÄºÁ≠ñÁï•ÔºàÁÆÄÂåñÁâàÔºâ"""
    
    def __init__(self, initial_capital=10000):
        self.initial_capital = initial_capital
        
        # ‰π∞ÂÖ•ÈòàÂÄºÔºà‰øùÊåÅ‰∏çÂèòÔºâ
        self.buy_levels = [
            (-1.0, 0.20, "ÊûÅÂ∫¶‰Ωé‰º∞‰π∞ÂÖ•20%"),
            (0.0, 0.30, "‰Ωé‰º∞‰π∞ÂÖ•30%"),
            (1.0, 0.30, "Ê≠£Â∏∏ÂÅè‰Ωé‰π∞ÂÖ•30%"),
            (2.0, 0.20, "Ê≠£Â∏∏‰π∞ÂÖ•20%")
        ]
        
        # ÂçñÂá∫ÈòàÂÄºÔºà‰ºòÂåñÔºöÈôç‰ΩéÈòàÂÄºÔºåÊèêÂâçÂçñÂá∫Ôºâ
        self.sell_levels = [
            (4.5, 0.15, "ÂÅèÈ´òÂçñÂá∫15%"),      # Êñ∞Â¢ûÔºöZ>4.5Â∞±ÂºÄÂßãÂçñ
            (5.5, 0.20, "È´ò‰º∞ÂçñÂá∫20%"),      # Âéü6.0Èôç‰ΩéÂà∞5.5
            (6.5, 0.25, "Ê∑±Â∫¶È´ò‰º∞ÂçñÂá∫25%"),  # Âéü7.0Èôç‰ΩéÂà∞6.5
            (7.5, 0.20, "ÊûÅÂ∫¶È´ò‰º∞ÂçñÂá∫20%"),  # Âéü8.0Èôç‰ΩéÂà∞7.5
            (8.5, 0.20, "Ê≥°Ê≤´Âå∫ÂçñÂá∫20%")     # Âéü9.0Èôç‰ΩéÂà∞8.5
        ]
    
    def run_backtest(self, df):
        """ËøêË°åÂõûÊµã"""
        print("=" * 100)
        print("üöÄ MVRV Z-Score‰ºòÂåñÈòàÂÄºÁ≠ñÁï•ÂõûÊµã")
        print("=" * 100)
        print()
        
        cash = self.initial_capital
        position = 0
        
        trades = []
        portfolio = []
        
        buy_triggered = {-1.0: False, 0.0: False, 1.0: False, 2.0: False}
        sell_triggered = {4.5: False, 5.5: False, 6.5: False, 7.5: False, 8.5: False}
        
        current_cycle_entry_price = None
        current_cycle_entry_date = None
        
        for i in range(1, len(df)):
            row = df.iloc[i]
            date = row['date']
            price = row['close']
            z_score = row['mvrv_z_score']
            
            total_value = cash + position * price
            
            # === ‰π∞ÂÖ•ÈÄªËæë ===
            if cash > 100:
                for threshold, buy_pct, reason in self.buy_levels:
                    if z_score < threshold and not buy_triggered[threshold]:
                        buy_value = self.initial_capital * buy_pct
                        if buy_value <= cash:
                            buy_position = buy_value / price
                            position += buy_position
                            cash -= buy_value
                            buy_triggered[threshold] = True
                            
                            if current_cycle_entry_price is None:
                                current_cycle_entry_price = price
                                current_cycle_entry_date = date
                            
                            trades.append({
                                'date': date,
                                'type': 'BUY',
                                'price': price,
                                'z_score': z_score,
                                'reason': reason,
                                'position': position
                            })
                            
                            print(f"  üü¢ {reason}: {date.strftime('%Y-%m-%d')} @ ${price:,.0f}, Z={z_score:.2f}")
                            break
            
            # ÈáçÁΩÆ‰π∞ÂÖ•Ê†áËÆ∞
            if z_score > 3:
                buy_triggered = {-1.0: False, 0.0: False, 1.0: False, 2.0: False}
            
            # === ÂçñÂá∫ÈÄªËæëÔºà‰ºòÂåñÈòàÂÄºÔºâ===
            if position > 0.01:
                for threshold, sell_pct, reason in self.sell_levels:
                    if z_score > threshold and not sell_triggered[threshold]:
                        sell_position = position * sell_pct
                        sell_value = sell_position * price
                        position -= sell_position
                        cash += sell_value
                        sell_triggered[threshold] = True
                        
                        if current_cycle_entry_price:
                            pnl_pct = (price / current_cycle_entry_price - 1) * 100
                        else:
                            pnl_pct = 0
                        
                        trades.append({
                            'date': date,
                            'type': 'SELL',
                            'price': price,
                            'z_score': z_score,
                            'reason': reason,
                            'position': position,
                            'pnl_pct': pnl_pct
                        })
                        
                        print(f"  üî¥ {reason}: {date.strftime('%Y-%m-%d')} @ ${price:,.0f}, Z={z_score:.2f}, ÁõàÂà©{pnl_pct:+.1f}%")
                        
                        if position < 0.01:
                            current_cycle_entry_price = None
                            current_cycle_entry_date = None
                        
                        break
            
            # ÈáçÁΩÆÂçñÂá∫Ê†áËÆ∞
            if z_score < 4:
                sell_triggered = {4.5: False, 5.5: False, 6.5: False, 7.5: False, 8.5: False}
            
            # ËÆ∞ÂΩïÁªÑÂêà‰ª∑ÂÄº
            total_value = cash + position * price
            portfolio.append({
                'date': date,
                'price': price,
                'z_score': z_score,
                'total_value': total_value,
                'position': position,
                'cash': cash
            })
        
        # ÊúÄÁªàÊåÅ‰ªì
        final_price = df.iloc[-1]['close']
        final_z = df.iloc[-1]['mvrv_z_score']
        if position > 0:
            print(f"\n‚ö†Ô∏è  ÊúÄÁªàÊåÅ‰ªì: {position:.4f} BTC")
            print(f"   ÂΩìÂâç‰ª∑Ê†º: ${final_price:,.0f}")
            print(f"   ÂΩìÂâçZ-Score: {final_z:.2f}")
            if current_cycle_entry_price:
                print(f"   ÂÖ•Âú∫‰ª∑Ê†º: ${current_cycle_entry_price:,.0f}")
                print(f"   ÊµÆÁõà: {(final_price/current_cycle_entry_price-1)*100:+.1f}%")
        
        portfolio_df = pd.DataFrame(portfolio)
        trades_df = pd.DataFrame(trades) if trades else pd.DataFrame()
        
        return portfolio_df, trades_df
    
    def show_results(self, portfolio_df, trades_df, period_name="ÂÖ®Âë®Êúü"):
        """ÊòæÁ§∫ÂõûÊµãÁªìÊûú"""
        print()
        print("=" * 100)
        print(f"üìä ‰ºòÂåñÈòàÂÄºÁ≠ñÁï• - {period_name}ÂõûÊµãÁªìÊûú")
        print("=" * 100)
        print()
        
        final = portfolio_df['total_value'].iloc[-1]
        ret = (final - self.initial_capital) / self.initial_capital * 100
        
        portfolio_df['peak'] = portfolio_df['total_value'].cummax()
        portfolio_df['dd'] = (portfolio_df['total_value'] - portfolio_df['peak']) / portfolio_df['peak'] * 100
        max_dd = portfolio_df['dd'].min()
        
        print(f"üí∞ ÂàùÂßãËµÑÈáë: ${self.initial_capital:,.0f}")
        print(f"üí∞ ÊúÄÁªà‰ª∑ÂÄº: ${final:,.0f}")
        print(f"üìà ÊÄªÊî∂ÁõäÁéá: {ret:+.2f}%")
        print(f"üìà Êî∂ÁõäÂÄçÊï∞: {final/self.initial_capital:.1f}ÂÄç")
        print(f"üìâ ÊúÄÂ§ßÂõûÊí§: {max_dd:.2f}%")
        print()
        
        if len(trades_df) > 0:
            buy_trades = trades_df[trades_df['type'] == 'BUY']
            sell_trades = trades_df[trades_df['type'] == 'SELL']
            
            print(f"üìä ‰∫§ÊòìÁªüËÆ°:")
            print(f"  ÊÄª‰∫§ÊòìÊ¨°Êï∞: {len(trades_df)}Ê¨°")
            print(f"  ‰π∞ÂÖ•Ê¨°Êï∞: {len(buy_trades)}Ê¨°")
            print(f"  ÂçñÂá∫Ê¨°Êï∞: {len(sell_trades)}Ê¨°")
            
            if len(sell_trades) > 0 and 'pnl_pct' in sell_trades.columns:
                sell_with_pnl = sell_trades[sell_trades['pnl_pct'].notna()]
                if len(sell_with_pnl) > 0:
                    win_sells = sell_with_pnl[sell_with_pnl['pnl_pct'] > 0]
                    print(f"    ‚Ä¢ ÁõàÂà©ÂçñÂá∫: {len(win_sells)}Ê¨°")
                    if len(win_sells) > 0:
                        print(f"    ‚Ä¢ Âπ≥ÂùáÁõàÂà©: {win_sells['pnl_pct'].mean():+.1f}%")
        
        print()
        print("=" * 100)
        
        return {
            'return': ret,
            'max_dd': max_dd,
            'trades': len(trades_df)
        }


# ============================================================================
# ËøêË°åÂõûÊµã
# ============================================================================
print("„ÄêÊ≠•È™§4„ÄëËøêË°å‰ºòÂåñÈòàÂÄºÁ≠ñÁï•ÔºàÂÖ®Âë®ÊúüÔºâ...")
print()

strategy = OptimizedMVRVStrategy(initial_capital=10000)
portfolio_df, trades_df = strategy.run_backtest(df)
result = strategy.show_results(portfolio_df, trades_df, "ÂÖ®Âë®Êúü")

# ÂØπÊØî
start_price = df.iloc[0]['close']
end_price = df.iloc[-1]['close']
hold_return = (end_price / start_price - 1) * 100
hold_value = 10000 * (end_price / start_price)

print()
print("üìä Á≠ñÁï•ÂØπÊØîÔºàÂÖ®Âë®ÊúüÔºâ:")
print(f"  ‰π∞ÂÖ•ÊåÅÊúâ:         {hold_return:+.2f}% (${hold_value:,.0f})")
print(f"  ‰ºòÂåñÈòàÂÄºÁ≠ñÁï•:     {result['return']:+.2f}% (${portfolio_df['total_value'].iloc[-1]:,.0f})")
print(f"  Â∑ÆË∑ù:             {result['return'] - hold_return:+.2f}%")
print()

# Ëøë5Âπ¥
print()
print("„ÄêÊ≠•È™§5„ÄëËøêË°å‰ºòÂåñÈòàÂÄºÁ≠ñÁï•ÔºàËøë5Âπ¥Ôºâ...")
print()

df_5y = df[df['date'].dt.year >= 2020].copy().reset_index(drop=True)
strategy_5y = OptimizedMVRVStrategy(initial_capital=10000)
portfolio_5y, trades_5y = strategy_5y.run_backtest(df_5y)
result_5y = strategy_5y.show_results(portfolio_5y, trades_5y, "Ëøë5Âπ¥")

start_price_5y = df_5y.iloc[0]['close']
end_price_5y = df_5y.iloc[-1]['close']
hold_return_5y = (end_price_5y / start_price_5y - 1) * 100

print()
print("üìä Á≠ñÁï•ÂØπÊØîÔºàËøë5Âπ¥Ôºâ:")
print(f"  ‰π∞ÂÖ•ÊåÅÊúâ:         {hold_return_5y:+.2f}%")
print(f"  ‰ºòÂåñÈòàÂÄºÁ≠ñÁï•:     {result_5y['return']:+.2f}%")
print(f"  Â∑ÆË∑ù:             {result_5y['return'] - hold_return_5y:+.2f}%")
print()

# ============================================================================
# ‰∏âÁ≠ñÁï•ÂØπÊØî
# ============================================================================
print()
print("=" * 100)
print("üìä ‰∏âÁ≠ñÁï•ÂÖ®Èù¢ÂØπÊØî")
print("=" * 100)
print()

# ËØªÂèñÂéüÂßãMVRVÁ≠ñÁï•ÁªìÊûú
try:
    orig_portfolio = pd.read_csv('results/ÁúüÂÆûmvrv_z_portfolio.csv')
    orig_final = orig_portfolio['total_value'].iloc[-1]
    orig_return = (orig_final - 10000) / 10000 * 100
    
    orig_portfolio['peak'] = orig_portfolio['total_value'].cummax()
    orig_portfolio['dd'] = (orig_portfolio['total_value'] - orig_portfolio['peak']) / orig_portfolio['peak'] * 100
    orig_max_dd = orig_portfolio['dd'].min()
    
    orig_trades = pd.read_csv('results/ÁúüÂÆûmvrv_z_trades.csv')
    orig_trade_count = len(orig_trades)
except:
    orig_return = 12627
    orig_max_dd = -83.14
    orig_trade_count = 20

print(f"{'Á≠ñÁï•':<20} {'Êî∂ÁõäÁéá':>15} {'Êî∂ÁõäÂÄçÊï∞':>12} {'ÊúÄÂ§ßÂõûÊí§':>12} {'‰∫§ÊòìÊ¨°Êï∞':>10}")
print("-" * 75)
print(f"{'‰π∞ÂÖ•ÊåÅÊúâ':<20} {hold_return:>14.2f}% {hold_value/10000:>11.1f}ÂÄç {'~-85%':>12} {'0Ê¨°':>10}")
print(f"{'ÂéüÂßãMVRV(Z>6)':<20} {orig_return:>14.2f}% {orig_final/10000:>11.1f}ÂÄç {orig_max_dd:>11.2f}% {orig_trade_count:>9}Ê¨°")
print(f"{'‰ºòÂåñMVRV(Z>4.5)':<20} {result['return']:>14.2f}% {portfolio_df['total_value'].iloc[-1]/10000:>11.1f}ÂÄç {result['max_dd']:>11.2f}% {result['trades']:>9}Ê¨°")
print()

print("üí° ÂÖ≥ÈîÆÂèëÁé∞:")
print(f"  ‚Ä¢ ‰ºòÂåñÁ≠ñÁï•ÂõûÊí§: {result['max_dd']:.2f}% (ÂéüÂßã: {orig_max_dd:.2f}%)")
print(f"  ‚Ä¢ ÂõûÊí§ÊîπÂñÑ: {orig_max_dd - result['max_dd']:.2f}%")
print(f"  ‚Ä¢ Êî∂ÁõäÁéá: {result['return']:.2f}% (ÂéüÂßã: {orig_return:.2f}%)")
print()

if result['max_dd'] > -50:
    print("üéâ ÊàêÂäüÔºÅÂõûÊí§ÊéßÂà∂Âú®50%‰ª•ÂÜÖ")
else:
    print("‚ö†Ô∏è  ÂõûÊí§‰ªçÁÑ∂ËæÉÂ§ßÔºåÂèØËÉΩÈúÄË¶ÅËøõ‰∏ÄÊ≠•‰ºòÂåñ")

print()
print("=" * 100)

# ‰øùÂ≠òÁªìÊûú
import os
os.makedirs('results', exist_ok=True)

portfolio_df.to_csv('results/‰ºòÂåñÈòàÂÄº_portfolio.csv', index=False, encoding='utf-8-sig')
trades_df.to_csv('results/‰ºòÂåñÈòàÂÄº_trades.csv', index=False, encoding='utf-8-sig')
portfolio_5y.to_csv('results/‰ºòÂåñÈòàÂÄº_portfolio_5y.csv', index=False, encoding='utf-8-sig')
trades_5y.to_csv('results/‰ºòÂåñÈòàÂÄº_trades_5y.csv', index=False, encoding='utf-8-sig')

print()
print("‚úÖ ÁªìÊûúÂ∑≤‰øùÂ≠òÂà∞ results/ Êñá‰ª∂Â§π")
print("=" * 100)







